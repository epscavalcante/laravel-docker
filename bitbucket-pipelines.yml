image: php:8.1.18-fpm-alpine3.18

definitions:
  services:
    mysql:
      image: mysql:8.0.33
      environment:
        MYSQL_DATABASE: 'app'
        MYSQL_ROOT_PASSWORD: 'root'
        memory: '256'
  steps:
    - step: &build
        name: 'Build'
        script:
          - apk add openssl
          - apt-get update && apt-get install -y unzip
          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
          - composer -V
          - php -r "file_exists('.env') || copy('.env.example', '.env');"
          - composer install
          - php artisan key:generate
        artifacts:
          - "**"
        caches:
          - composer

    - step: &test-memory
        name: 'Test'
        services: 
          - docker
        caches:
          - composer
        script:
          - php artisan test
    
    - step: &test-database
        name: 'Test'
        services: 
          - docker
          - mysql
        caches:
          - composer
        script:
          - docker-php-ext-install pdo pdo_mysql
          - php artisan test

    - step: &lint
        name: 'Lint'
        script:
          - ./vendor/bin/pint --test

    - step: &build-image
        name: Build and Push image to DockerHub
        script:
          - export DOCKER_BUILDKIT=1
          - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
          - docker build -t $DOCKER_HUB_USER/laravel-example -f ./.docker/php/Dockerfile.prod .
          - docker tag $DOCKER_HUB_USER/laravel-example $DOCKER_HUB_USER/laravel-example:latest
          - docker tag $DOCKER_HUB_USER/laravel-example $DOCKER_HUB_USER/laravel-example:$BITBUCKET_COMMIT
          - docker push --all-tags $DOCKER_HUB_USER/laravel-example
          # - pipe: atlassian/aws-ecr-push-image:2.0.0
          #   variables:
          #     AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          #     AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
          #     AWS_DEFAULT_REGION: us-east-1
          #     IMAGE_NAME: laravel-example:$APP_VERSION
          #     TAGS: "$MAIN_IMAGE_TAG $APP_VERSION $BITBUCKET_BUILD_NUMBER"
        services:
          - docker

pipelines:

  # default:
  #   - step: 
  #       <<: *build
  #   - step: 
  #       <<: *lint
  #   - step: 
  #       <<: *test
  #   - step: 
  #       <<: *build-image
  branches:
    main:
      - step: 
          <<: *build
      - step: 
          <<: *lint
      - step: 
          <<: *test-memory
      - step: 
          <<: *test-database
      - step: 
          <<: *build-image